#!/usr/bin/env python
import os
import csv
import sys
from optparse import OptionParser
from optparse import OptionGroup
import glob
import time
import threading
import subprocess
import shlex
#get current path
path = '/'.join(os.path.dirname(os.path.realpath(__file__)).split('/')[:-1])
sys.path.insert(0,path)
from eon import fa, summary
def command(CMD):
	#runs command CMD as a subprocess
	print CMD
	return subprocess.Popen(CMD, shell=True,stdout=subprocess.PIPE)

def running_processes():
	#lists running subprocesses
	ps =  subprocess.Popen(['ps','aux'], 
							shell=True,
							stdout=subprocess.PIPE).stdout.read()
	return map(lambda x: int(x.split()[0]),ps.split('\n')[1:-1])

def err(*vars):
	#raise error
	sys.stderr.write(' '.join(map(str,vars))+'\n')

def check_files(taxon='mus musculus',dir = 'annotations/',version='GRCm38'):
	'''
	checks, downloads and installs annotation files
	'''
	try: os.makedirs(dir)
	except OSError: pass

	#check gtf
	f = glob.glob(dir+'*.gtf')
	if f == []: 
		from eon import gtf
		gtf.getGTF(taxon = taxon, dir = dir)
		reload(gtf)
	#
	fa.set_taxon(taxon=taxon,version=version)

def main():
	# define CLI parameters
	usage ='maltese [options] diff_splicing_file'
	description='''
	Takes as input a dexseq output file and enriches the loci with motifs
	overrepresented (compared with the rest of the gene).
	'''.replace('\t','') # .replace('\n','').replace('\t','')
		#./bin/maltese -vm -s '\t' -F '1,3,5,6,4' -P 5 MATS_5.txt
	parser = OptionParser(description=description,usage = usage)

	group = OptionGroup(parser, "Required parameters",
                    "Parameters required to run maltesers"
			)
	group.add_option('-T','--taxon',
				action='store', type='string',
				dest='annotations',default='Mus_musculus',
				help='Organisms of study (Mus_musculus, Homo_sapiens...) if no genome files presents,'
					'it will try to downloads and generate anotation files of defined taxon')

	group.add_option('-t','--taxon_version',
				action='store', type='string',
				dest='annotation_version',default='GRCm38',
				help='defines what genome version to download, default is "GRCm38"')

	group.add_option('-a','--annotations',
				action='store', type='string',
				dest='annotationsDir',default='annotations',
				help='directory with annotations: the gtf file')

	group.add_option('-g','--gtf',
				action='store', type='string',
				dest='gtf',
				help='the gtf annotation file')

	group.add_option('-s','--sep',
				action='store', type='string',
				dest='sep',default=',',
				help='what separator is present in the input. '
					'Also used for output')

	group.add_option('-o','--output',
				action='store', type='string',
				dest='output',default='',
				help='output file, Default will output results in current directory')

	group.add_option('-F','--format',
				action='store', type='string',
				dest='inputFormat',#default="0,8,9,10,12,-",
				help='what format is the input data'
					'it takes a string such as "0,8,9,10,12,-" (default dexseq format)'
					'each number represents the column where certain information is.'
					'"entrezID,geneName,chromosome,start,end,strand,pvalue,change"'
					'change can be "-" if none present, it is only used for plotting'
					)
	parser.add_option_group(group)

	group = OptionGroup(parser, "Optional parameters")

	group.add_option('-f','--plotFormat',
				action="store",type="string",
				dest='plotFormat',default="pdf",
				help="Which format to save the plots, default is pdf")

	group.add_option('-v','--verbose',
				action='store_true',
				dest ='v', default=False,
				help='shows you what am I thinking')

	parser.add_option_group(group)

	parser.add_option('-V','--version',
				action='store_true',
				dest ='version', default=False,
				help='prints version')


	parser.add_option('-P','--Processes',
			action='store', type='int',
			dest='processes',default=1,
			help='number of processors to use')

	group = OptionGroup(parser, "Debugging parameters")

	group.add_option('-S','--SkipProsite',
				action='store_true',
				dest='skipProsite',default=False,
				help='Skips the steps leading to analysing the prosite output')

	group.add_option('-p','--purge',
				action='store_true',
				dest='purge', default=False,
				help='delete all anotation files')

	group.add_option('-m','--Tempfiles',
				action='store_true',
				dest ='tempfiles', default=False,
				help='does not erase temprary files')

	parser.add_option_group(group)




	(options, args) = parser.parse_args()
	v = options.v
	#output = options.output
	annotations = options.annotations
	annotation_version = options.annotation_version
	annotationDir = options.annotationsDir
	output = options.output
	skipProsite = options.skipProsite
	inputFormat = options.inputFormat
	sep = options.sep
	processes = options.processes
	plotFormat = options.plotFormat
	gtf = options.gtf
	
	if sep == '\\t':sep = '\t'

	if options.version:
		err('this is version',0)
		return None

	if len(args) == 0:
		parser.print_help()
		return None
	
	dexseq=args[0]
	# no header format given
	# print an enumarated top line of the input data as a guide
	if inputFormat==None:
		print dexseq
		f = open(dexseq)
		contents = f.read().split('\n')[:2] # gets the first two lines of the file
		f.close()
		head = zip(*[line.split(sep) for line in contents])
		print "option -F (--format) should be a comma separated indices of the column number of 'entrezID,geneName,chromosome,start,end,strand,pvalue,change'"
		print "this are the header indices for your file:"
		for a,b in enumerate( head):
			b,c = b
			print a,'\t',b,'(',c,')'

		sys.exit()
	# if no output given, create one based on input
	if output=='':
			output = '%(dexseq)s.withMotifs.csv'%locals()

	# remove annotation files and download them again
	# this can help with trouble shooting
	if options.purge:
		commandOptions ='-rf'
		if v:commandOptions+='v'
		os.system('rm '+commandOptions+' '+annotationDir+'/*')
		check_files(taxon = annotations,version =annotation_version , dir = annotationDir)
	'''
	if annotations != '':
		check_files(taxon = annotations,version =annotation_version , dir = annotationDir)
	'''

	# too many input files given, only one can be given
	if len(args) > 1:
		print args
		err('more than one argument given')
		return None 
	
	# starting analysis
	if v: err('Analyzing',dexseq)

	# if multiprocesssing is chosen
	if processes>1:
		#running multiprocesses, making a directory 
		#splitting input file
		lines = open(dexseq).read().splitlines()
		header = lines.pop(0) # gets the header
		if v: print 'dividing input'
		#creatign tmpDir
		directory = dexseq+'TMP_'+str(processes)
		if not os.path.exists(directory):
			os.makedirs(directory)
		directory = dexseq+'TMP'

		tempInput = '{}_{}/{}_input.txt'
		#empties/creates output file
		f = open(output,'w')
		f.write(header)
		f.close()

		subFiles = []
		for n in range(processes): subFiles.append([header])
		for n, line in enumerate(lines):#fills temp input files
			n = n%processes
			FILE = tempInput.format(directory,processes,n)
			subFiles[n].append(line)
		for n in range(processes): #creates/empies files
			f = open(tempInput.format(directory,processes,n),'w')
			f.write('\n'.join(subFiles[n]))
			f.close()
		PIDs = [] # keep track of subprocesses
		for n in range(processes):
			# calls maltesers to run on one process for each separated file
			CMD = ' '.join([
				__file__,
				'--Processes 1',
				'--sep %s'%repr(sep),
				'--format %s'%repr(inputFormat),
				'--annotations %s'%repr(annotationDir),
				'--Tempfiles','--verbose',#'--SkipProsite',
				tempInput.format(directory,processes,n),
				])
			PIDs.append(command(CMD))

		try: #wait for the subprocesses to run
			while None in map(lambda x:x.poll(),PIDs):
				#print output of each subprocess
				for i in PIDs: 
					print i.stdout.read()
				#print 1
				time.sleep(1)


		#if program interrupted then kill subprocesses
		except KeyboardInterrupt as e:
			for i in PIDs:
				if i.poll()==None:
					print 'killing',i
					i.kill()

		#merging output files 
		rows = [open('{}_{}/0_input.txt.withMotifs.csv.tmp'.format(directory,processes)).read().splitlines()[0]] #gets the header of one output file
		# add the rows of the outputs together
		for n in range(processes):
			rows = rows+open('{}_{}/{}_input.txt.withMotifs.csv.tmp'.format(directory,processes,n)).read().splitlines()[1:]
		# create output report
		open(output+'.tmp','w').write('\n'.join(rows))
		print 'summarizing'
		summary.summaryDex(output+'.tmp',output,sep = sep,FORMAT = inputFormat)
		print 'Done', output

	else:
		# if one process is choosen (or each process of the subprocesses)
		from eon import maltese
		# starts the maltese class from the maltese package
		dexMotif = maltese.maltese(dexseq,v,
						taxon=annotations, 
						version=annotation_version , 
						temp = options.tempfiles,
						annotationDir = annotationDir,
						gtf = gtf,
						output=output+'.tmp',
						outputMode = 'w',
						sep=sep,
						inputFormat=inputFormat)
		# runs the motif entichment method
		dexMotif.addMotifs(skipProsite=skipProsite)
		# generate a report of the ouptut
		summary.summaryDex(output+'.tmp',output,sep = sep,FORMAT = inputFormat,plotFormat=plotFormat)



if __name__ == '__main__': 
	main()
