#!/usr/bin/env python
import os
import csv
import sys
from optparse import OptionParser
import glob
import time
import threading
import subprocess
import shlex
path = '/'.join(os.path.dirname(os.path.realpath(__file__)).split('/')[:-1])
sys.path.insert(0,path)
from eon import fa, summary
#from eon import dex #this is imported at a later stage as it takes a long time to load
def command(CMD):
	print CMD
	return subprocess.Popen(CMD, shell=True,stdout=subprocess.PIPE)

def running_processes():
	ps =  subprocess.Popen(['ps','aux'], 
							shell=True,
							stdout=subprocess.PIPE).stdout.read()
	return map(lambda x: int(x.split()[0]),ps.split('\n')[1:-1])

def err(*vars):

	sys.stderr.write(' '.join(map(str,vars))+'\n')

def check_files(taxon='mus musculus',dir = 'annotations/',version='GRCm38'):
	'''
	checks, downloads and installs annotation files
	'''
	try: os.makedirs(dir)
	except OSError: pass

	#check gtf
	f = glob.glob(dir+'*.gtf')
	if f == []: 
		from eon import gtf
		gtf.getGTF(taxon = taxon, dir = dir)
		reload(gtf)
	#
	fa.set_taxon(taxon=taxon,version=version)	
		
def main():
	description='''
	Takes as input a dexseq output file and enriches the loci with motifs
	overrepresented (compared with the rest of the gene)
	dexMotif [options] <dexseq> 

	./bin/maltese -vm -s '\t' -F '1,3,5,6,4' -P 5 MATS_5.txt


	'''.replace('\n','').replace('\t','')
	parser = OptionParser(description=description)

	parser.add_option('-o','--output',
				action='store', type='string',
				dest='output',default='',
				help='output file')

	parser.add_option('-a','--annotations',
				action='store', type='string',
				dest='annotationsDir',default='annotations',
				help='directory with annotations: the gtf file')

	parser.add_option('-T','--taxon',
				action='store', type='string',
				dest='annotations',default='Mus_musculus',
				help='downloads and generates anotation files of defined taxon -A "Mus_musculus"')

	parser.add_option('-t','--taxon_version',
				action='store', type='string',
				dest='annotation_version',default='GRCm38',
				help='defines what genome version to download, default is "GRCm38"')

	parser.add_option('-p','--purge',
				action='store_true',
				dest='purge', default=False,
				help='delete all anotation files (usefull for changing the taxon of interest)')
	
	parser.add_option('-v','--verbose',
				action='store_true',
				dest ='v', default=False,
				help='shows you what am I thinking')

	parser.add_option('-V','--version',
				action='store_true',
				dest ='version', default=False,
				help='prints version')

	parser.add_option('-m','--Tempfiles',
				action='store_true',
				dest ='tempfiles', default=False,
				help='does not erase temprary files')
	
	parser.add_option('-s','--sep',
				action='store', type='string',
				dest='sep',default=',',
				help='what separator is present in the input. '
					'Also used for output')

	parser.add_option('-S','--SkipProsite',
				action='store_true',
				dest='skipProsite',default=False,
				help='Skips the steps leading to analysing the prosite output')

	parser.add_option('-F','--format',
				action='store', type='string',
				dest='inputFormat',default="0,8,9,10,12,-",
				help='what format is the input data'
					'it takes a string such as "0,8,9,10,12,-" (default dexseq format)'
					'each number represents the column where certain information is.'
					'"event_name,chromosome,start,end,strand,change"'
					'for rMats use "1,3,5,6,4,23"'
					'change can be "-" if none present, it is only used for plotting'
					)

	parser.add_option('-P','--Processes',
			action='store', type='int',
			dest='processes',default=1,
			help='number of processors to use')



	(options, args) = parser.parse_args()
	v = options.v
	#output = options.output
	annotations = options.annotations
	annotation_version = options.annotation_version
	annotationDir = options.annotationsDir
	output = options.output
	skipProsite = options.skipProsite
	inputFormat = options.inputFormat
	sep = options.sep
	processes = options.processes
	if sep == '\\t':sep = '\t'

	if options.version:
		err('this is version',0)
		return None

	dexseq=args[0]
	if output=='':
			output = '%(dexseq)s.withMotifs.csv'%locals()		
	
	if options.purge:
		commandOptions ='-rf'
		if v:commandOptions+='v'
		os.system('rm '+commandOptions+' '+annotationDir+'/*')
		check_files(taxon = annotations,version =annotation_version , dir = annotationDir)
	'''
	if annotations != '':
		check_files(taxon = annotations,version =annotation_version , dir = annotationDir)
	'''

	if len(args) == 0:
		parser.print_help()
		return None

	if len(args) > 1:
		print args
		err('more than one argument given')
		return None  
	

	if v: err('Analyzing',dexseq)


	if processes>1:
		#running multiprocesses, making a directory 
		#creatign tmpDir
		directory = dexseq+'TMP'
		if not os.path.exists(directory):
			os.makedirs(directory)
		#splitting input file
		lines = open(dexseq).read().splitlines()
		header = lines.pop(0)
		if v: 'dividing input'
		tempInput = '{}_{}/{}_input.txt'
		#empties/creates output file
		f = open(output,'w')
		f.write(header)
		f.close()

		subFiles = []
		for n in range(processes): subFiles.append([header])
		for n, line in enumerate(lines):#fills temp input files
			n = n%processes
			FILE = tempInput.format(directory,processes,n)
			subFiles[n].append(line)
		for n in range(processes): #creates/empies files
			f = open(tempInput.format(directory,processes,n),'w')
			f.write('\n'.join(subFiles[n]))
			f.close()
		PIDs = []
		for n in range(processes):
			CMD = ' '.join([
				__file__,
				'--Processes 1',
				'--sep %s'%repr(sep),
				'--format %s'%repr(inputFormat),
				'--annotations %s'%repr(annotationDir),
				'--Tempfiles','--verbose','--SkipProsite',
				tempInput.format(directory,processes,n),
				])
			
			PIDs.append(command(CMD))

		try: #wait for the subprocesses to run
			while None in map(lambda x:x.poll(),PIDs):
				#print 'runnning'
				for i in PIDs: 
					print i.stdout.read()
				print 1
				time.sleep(1)


		#if program interrupted then kill subprocesses
		except KeyboardInterrupt as e:
			for i in PIDs:
				if i.poll()==None:
					print 'killing',i
					i.kill()

		#merging output files and 
		rows = [open('{}_{}/0_input.txt.withMotifs.csv.tmp'.format(directory,processes)).read().splitlines()[0]]
		for n in range(processes):
			#print 'albert remember to merge '+tempInput.format(directory,n)
			rows = rows+open('{}_{}/{}_input.txt.withMotifs.csv.tmp'.format(directory,processes,n)).read().splitlines()[1:]
		open(output+'.tmp','w').write('\n'.join(rows))
		summary.summaryDex(output+'.tmp',output,sep = sep,FORMAT = inputFormat)

		print 'Done', output

	else:
		from eon import maltese
		dexMotif = maltese.maltese(dexseq,v,
					taxon=annotations, 
					version=annotation_version , 
					temp = options.tempfiles,
					annotationDir = annotationDir,
					output=output+'.tmp',
					outputMode = 'w',
					sep=sep,
					inputFormat=inputFormat)
		dexMotif.addMotifs(skipProsite=skipProsite)
		summary.summaryDex(output+'.tmp',output,sep = sep,FORMAT = inputFormat)



if __name__ == '__main__': 
	#check_files()
	main()
